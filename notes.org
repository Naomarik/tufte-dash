* Compile sizes
** Hello World project size
  7.8M Jun 12 15:23 core
** reitit/ring etc smaller?!
 naomarik naomarik 6.7M Jun 12 16:35 core
* Benchmarking

** clj executed ring dev (reloadable) handler with jetty
➜  wrk git:(master) ✗ ./wrk http://localhost:6500
Running 10s test @ http://localhost:6500
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   649.65us  587.37us   7.41ms   83.12%
    Req/Sec     8.97k   693.23     9.95k    86.63%
  180288 requests in 10.10s, 25.27MB read
Requests/sec:  17850.26

Transfer/sec:      2.50MB

** clj ring app handler with jetty
➜  wrk git:(master) ✗ ./wrk http://localhost:6500
Running 10s test @ http://localhost:6500
  2 threads and 10 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   212.53us  619.49us  17.02ms   97.17%
    Req/Sec    37.02k     5.32k   42.66k    92.50%
  736782 requests in 10.00s, 103.29MB read
Requests/sec:  73647.75
Transfer/sec:     10.32MB

** Compiled binary graalvm with jetty

   ➜  wrk git:(master) ✗ ./wrk http://localhost:6500
   Running 10s test @ http://localhost:6500
   2 threads and 10 connections
   Thread Stats   Avg      Stdev     Max   +/- Stdev
   Latency   215.75us  627.17us  18.18ms   97.03%
   Req/Sec    36.55k     6.70k   43.41k    90.59%
   734590 requests in 10.10s, 102.98MB read
   Requests/sec:  72737.12
   Transfer/sec:     10.20MB


** compiled graalvm another command

➜  wrk git:(master) ✗ ./wrk -t2 -c16 -d10s http://localhost:6500
Running 10s test @ http://localhost:6500
  2 threads and 16 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   272.86us  704.61us  15.42ms   95.78%
    Req/Sec    51.03k     3.70k   60.67k    80.60%
  1020325 requests in 10.10s, 143.04MB read
Requests/sec: 101017.98
Transfer/sec:     14.16MB
* If having issues about class init problems
https://medium.com/graalvm/updates-on-class-initialization-in-graalvm-native-image-generation-c61faca461f7
add 
"-H:+TraceClassInitialization"
"--debug-attach" to the native image


jdb -attach localhost:8000


Set a breakpoint

`stop in org.apache.http.nio.conn.ssl.SSLIOSessionStrategy.<init>`
`stop in org.apache.http.nio.conn.ssl.SSLIOSessionStrategy.<clinit>`

Then `cont` to run
and `where` to look at stack trace
* Working with tufte deftypes


@(tufte/merge-pstats (PStats. (.-pd (:request eah))
                              (.-t1 (:request eah))
                              (.-tspans (:request eah))
                              (delay @(:request eah)))

                     (PStats. (.-pd (:request ah))
                              (.-t1 (:request ah))
                              (.-tspans (:request ah))
                              (delay @(:request ah))))



(defn timespans->map [timespan]
  {:t0 (.-t0 timespan)
   :t1 (.-t1 timespan)}
  )



(nippy/thaw (nippy/freeze (.-pstate_ (.-pd (:request ah)))))


;; (type (.-pstate_ (.-pd (:request ah))))
;; (.-acc (.-pstate_ (.-pd (:request ah))))


(nippy/extend-thaw :tufte/pState
                   [s]
                   (let [{:keys [acc id-times id-stats]} (clojure.edn/read-string (.readUTF s))]
                     (PState. acc id-times id-stats)))

(nippy/extend-freeze PState :tufte/pState
                     [x data-output]
                     (.writeUTF data-output
                                (str {:acc (.-acc x)
                                      :id-times (.-id-times x)
                                      :id-stats (.-id-stats x)})))

(nippy/extend-thaw :tufte/pStats
                   [s]
                   (let [{:keys [pd t1 tspans]} (clojure.edn/read-string (.readUTF s))]
                     (PStats. pd t1 tspans (delay))))

(nippy/extend-freeze PStats :tufte/pStats
                     [x data-output]
                     (.writeUTF data-output
                                (str {:pd (.-pd x)
                                      :t1 (.-t1 x)
                                      :tspans (.-tspans x)})))

(nippy/extend-thaw :tufte/pData
                   [s]
                   (.readUTF s)
                   (let [{:keys [nmax t0 pstate]} (clojure.edn/read-string (.readUTF s))]
                     (PData. nmax t0 pstate)))

(nippy/extend-freeze PData :tufte/pData
                     [x data-output]
                     (.writeUTF data-output
                                (str {:nmax (.-nmax x)
                                      :t0 (.-t0 x)
                                      :pstate (.-pstate_ x)})))

(nippy/thaw (nippy/freeze (.-pd (:request ah))))

(nippy/thaw (nippy/freeze
             (:request ah)
  #_(PStats. (.-pd (:request ah))
             (.-t1 (:request ah))
             (.-tspans (:request ah))
             (delay {}))))

((defn pstats->map [pstats]
   (let [
         pd (.-pd pstats)
         t1 (.-t1 pstats)
         tspans (.-tspans pstats)

         nmax (.-nmax pd)
         t0 (.-t0 pd)
         pstate (.-pstate_ pd)

         acc (.-acc pstate)
         id-times (.-id-times pstate)
         id-stats (.-id-stats pstate)
         ]

     {:pstats {:pd {:nmax nmax
                    :t0 t0
                    :pstate {:acc acc
                             :id-times id-times
                             :id-stats id-stats}
                    }
               :t1 t1
               :tspans (map timespans->map tspans)
               }}

     )) (:request ah))

(.-pstate_ (.-pd (:request ah)))
